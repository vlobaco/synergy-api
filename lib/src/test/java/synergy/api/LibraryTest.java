/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package synergy.api;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.net.URL;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

class LibraryTest {
	
	public LibraryTest() {
		
	}
		
	@Test 
	public void componentTest() {
		Integer id = 1;
		String name = "My component";
		String description = "Component description";
		
		Component component = new Component (id, name, description);
		assertEquals(component.getId(), id);
		assertEquals(component.getName(), name);
		assertEquals(component.getDescription(), description);
	}
	
	@Test
	public void fieldTest() {
		Integer id = 1;
		String name = "My field";
		String description = "Field description";
		Boolean compulsory = false;
		
		Field field = new Field(id, name, description, compulsory);
		assertEquals(field.getId(), id);
		assertEquals(field.getName(), name);
		assertEquals(field.getDescription(), description);
		assertEquals(field.getCompulsory(), compulsory);
	}
	
	TextField textField;
	
	@Test
	public void textFieldTest() {
		Integer id = 1;
		String name = "My Text Field";
		String description = "This is a test Text Field";
		String text = "Value";
		Boolean compulsory = true;
		Integer maxSize = 256;
		
		textField= new TextField(id, name, description, compulsory, maxSize, text);
		assertEquals(textField.getId(), id);
		assertEquals(textField.getName(), name);
		assertEquals(textField.getDescription(), description);
		assertEquals(textField.getText(), text);
		assertEquals(textField.getCompulsory(), compulsory);
		assertEquals(textField.getMaxSize(), maxSize);
	}
	
	DateField dateField;
	
	@Test
	public void dateFieldTest() {
		Integer id = 1;
		String name = "My Date Field";
		String description = "This is a test Date Field";
		Date date = new Date();
		String value = "01-04-2022 08:36";
		Boolean compulsory = true;
		
		dateField = new DateField(id, name, description, compulsory, date);
		assertEquals(dateField.getId(), id);
		assertEquals(dateField.getName(), name);
		assertEquals(dateField.getDescription(), description);
		assertEquals(dateField.getDate(), date);
		dateField.parce(value);
		assertEquals(dateField.getDateAsString(), value);
		assertEquals(dateField.getCompulsory(), compulsory);
	}
	
	AttachmentField attachmentField;
	@Test
	public void attachmentFieldTest() throws Exception {
		Integer id = 1;
		String name = "My Attachment Field";
		String description = "This is a test Attachment Field";
		URL url = new URL("https://git.institutomilitar.com/vlobaco/synergy/-/wikis/resources/remote_file.txt");
		Boolean compulsory = false;
		
		attachmentField = new AttachmentField(id, name, description, compulsory, url);
		String line = attachmentField.getReader().readLine();
		assertEquals(attachmentField.getId(), id);
		assertEquals(line, "This is a remote file.");
		assertEquals(attachmentField.getName(), name);
		assertEquals(attachmentField.getDescription(), description);
		assertEquals(attachmentField.getUrl(), url);
		assertEquals(attachmentField.getCompulsory(), compulsory);
	}
		
	NumberField numberField;
	@Test
	public void numberFieldTest() {
		Integer id = 1;
		String name = "My Number Field";
		String description = "This is a test Number Field";
		Double number = 3.14;
		Boolean compulsory = true;
		Double min = -1.0;
		Double max = 100.0;
		
		numberField = new NumberField(id, name, description, compulsory, min, max, number);
		assertEquals(numberField.getId(), id);
		assertEquals(numberField.getName(), name);
		assertEquals(numberField.getDescription(), description);
		assertEquals(numberField.getNumber(), number);
		assertEquals(numberField.getCompulsory(), compulsory);
		assertEquals(numberField.getMin(), min);
		assertEquals(numberField.getMax(), max);
	}
	
	@Test
	public void processTest() {
		Integer id = 1;
		String name = "My process";
		String description = "This is a test Process";
		
		Process process = new Process(id, name, description);
		List<Field> arrayOfFields = Arrays.asList(textField, dateField, attachmentField, numberField);
		for (Field field : arrayOfFields) {
			process.getFields().add(field);
		}
		assertEquals(process.getName(), name);
		assertEquals(process.getDescription(), description);
		assertIterableEquals(process.getFields(), arrayOfFields);
	}
}
